// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from radar_msgs:msg/RadarTrack.idl
// generated code does not contain a copyright notice

#ifndef RADAR_MSGS__MSG__DETAIL__RADAR_TRACK__STRUCT_H_
#define RADAR_MSGS__MSG__DETAIL__RADAR_TRACK__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

/// Constant 'NO_CLASSIFICATION'.
/**
  * Object classifications (Additional vendor-specific classifications are permitted starting from 32000 e.g. Car)
 */
enum
{
  radar_msgs__msg__RadarTrack__NO_CLASSIFICATION = 0
};

/// Constant 'STATIC'.
enum
{
  radar_msgs__msg__RadarTrack__STATIC = 1
};

/// Constant 'DYNAMIC'.
enum
{
  radar_msgs__msg__RadarTrack__DYNAMIC = 2
};

// Include directives for member types
// Member 'uuid'
#include "unique_identifier_msgs/msg/detail/uuid__struct.h"
// Member 'position'
#include "geometry_msgs/msg/detail/point__struct.h"
// Member 'velocity'
// Member 'acceleration'
// Member 'size'
#include "geometry_msgs/msg/detail/vector3__struct.h"

/// Struct defined in msg/RadarTrack in the package radar_msgs.
/**
  * This message relates only to FMCW radar.
  * All variables below are relative to the radar's frame of reference.
  * This message is not meant to be used alone but as part of a stamped or array message.
 */
typedef struct radar_msgs__msg__RadarTrack
{
  /// A unique ID of the object generated by the radar.
  /// Note: The z component of these fields is ignored for 2D tracking.
  unique_identifier_msgs__msg__UUID uuid;
  /// x, y, z coordinates of the centroid of the object being tracked.
  geometry_msgs__msg__Point position;
  /// The velocity of the object in each spatial dimension.
  geometry_msgs__msg__Vector3 velocity;
  /// The acceleration of the object in each spatial dimension.
  geometry_msgs__msg__Vector3 acceleration;
  /// The object size in the sensor frame.
  /// For example length, width, and height,
  /// or the diameter of an ellipsoid in the x, y, z, dimensions.
  geometry_msgs__msg__Vector3 size;
  /// An optional classification of the object (see above).
  uint16_t classification;
  /// Upper-triangle covariance about the x, y, z axes.
  float position_covariance[6];
  /// Upper-triangle covariance about the x, y, z axes.
  float velocity_covariance[6];
  /// Upper-triangle covariance about the x, y, z axes.
  float acceleration_covariance[6];
  /// Upper-triangle covariance about the x, y, z axes.
  float size_covariance[6];
} radar_msgs__msg__RadarTrack;

// Struct for a sequence of radar_msgs__msg__RadarTrack.
typedef struct radar_msgs__msg__RadarTrack__Sequence
{
  radar_msgs__msg__RadarTrack * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} radar_msgs__msg__RadarTrack__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // RADAR_MSGS__MSG__DETAIL__RADAR_TRACK__STRUCT_H_
